name: Continuous Integration
on:
  push:
    branches:
      - main
      - test_ci
jobs:
  lint:
    name: Lint the code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "14.15.4"
      - name: Install packages
        run: yarn install
      - name: Lint using ESLint
        run: yarn lint
  test:
    name: Test the code
    runs-on: ubuntu-latest
    outputs:
      test_result: ${{ steps.test_with_jest.outcome }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "14.15.4"
      - name: Install packages
        run: yarn install
      - name: Test using Jest
        id: test_with_jest
        run: yarn test:coverage --coverageReporters=json-summary
      - name: Upload test coverage report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: coverage_report
          path: ./jest/coverage/coverage-summary.json
  generate_badges:
    name: Generate badges
    needs: test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "14.15.4"
      - name: Install packages
        run: yarn install
      - name: Download test coverage report
        uses: actions/download-artifact@v2
        with:
          name: coverage_report
      - name: Parse test coverage
        id: parse_test_coverages
        run: |
          statement_coverage=$(node ./scripts/extract_test_coverage_from_report.js -f coverage-summary.json -t statements)
          branch_coverage=$(node ./scripts/extract_test_coverage_from_report.js -f coverage-summary.json -t branches)
          function_coverage=$(node ./scripts/extract_test_coverage_from_report.js -f coverage-summary.json -t functions)
          line_coverage=$(node ./scripts/extract_test_coverage_from_report.js -f coverage-summary.json -t lines)
          echo ::set-output name=statement_coverage::"${statement_coverage}"
          echo ::set-output name=branch_coverage::"${branch_coverage}"
          echo ::set-output name=function_coverage::"${function_coverage}"
          echo ::set-output name=line_coverage::"${line_coverage}"
      - name: Assign badge colors
        id: assign_badge_colors
        run: |
          source ./scripts/ci_utils.sh
          test_result_color=$(get_test_result_color "${{ needs.test.outputs.test_result }}")
          statement_coverage_color=$(get_test_coverage_color "${{ steps.parse_test_coverages.outputs.statement_coverage }}")
          branch_coverage_color=$(get_test_coverage_color "${{ steps.parse_test_coverages.outputs.branch_coverage }}")
          function_coverage_color=$(get_test_coverage_color "${{ steps.parse_test_coverages.outputs.function_coverage }}")s
          line_coverage_color=$(get_test_coverage_color "${{ steps.parse_test_coverages.outputs.line_coverage }}")
          echo ::set-output name=test_result_color::"${test_result_color}"
          echo ::set-output name=statement_coverage_color::"${statement_coverage_color}"
          echo ::set-output name=branch_coverage_color::"${branch_coverage_color}"
          echo ::set-output name=function_coverage_color::"${function_coverage_color}"
          echo ::set-output name=line_coverage_color::"${line_coverage_color}"
      - name: Generate badge for test result
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: jest_test_result.json
          label: "Test"
          message: ${{ needs.test.outputs.test_result }}
          color: ${{ steps.assign_badge_colors.outputs.test_result_color }}
      - name: Generate badge for statement coverage
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: jest_statement_coverage.json
          label: "Coverage:statements"
          message: ${{ format('{0}%', steps.parse_test_coverages.outputs.statement_coverage) }}
          color: ${{ steps.assign_badge_colors.outputs.statement_coverage_color }}
      - name: Generate badge for branch coverage
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: jest_branch_coverage.json
          label: "Coverage:branches"
          message: ${{ format('{0}%', steps.parse_test_coverages.outputs.branch_coverage) }}
          color: ${{ steps.assign_badge_colors.outputs.branch_coverage_color }}
      - name: Generate badge for function coverage
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: jest_function_coverage.json
          label: "Coverage:functions"
          message: ${{ format('{0}%', steps.parse_test_coverages.outputs.function_coverage) }}
          color: ${{ steps.assign_badge_colors.outputs.function_coverage_color }}
      - name: Generate badge for line coverage
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: jest_line_coverage.json
          label: "Coverage:lines"
          message: ${{ format('{0}%', steps.parse_test_coverages.outputs.line_coverage) }}
          color: ${{ steps.assign_badge_colors.outputs.line_coverage_color }}
